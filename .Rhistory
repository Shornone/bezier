n <- 1000
p <- 0
m <- 1
v <- c(runif(1, -1), runif(1, -1))
# main algorithm ----
for (i in seq(1, n)) {
if (runif(1) <= p) {
m <- m + 1
df <- df %>% rbind(c(runif(1), runif(1), runif(1), m, 0, i+1))
} else {
valid <- 0
while (valid < 1) {
temp <- sample_n(df %>% filter(marked < 3), 1)
frame <- temp$frame[1]
x1 <- temp$x[1]
y1 <- temp$y[1]
r1 <- temp$r[1]
r2 <- ifelse(runif(1) <= p, runif(1, 0, 10), runif(1, 0.5, 1))
#r2 <- 1
v <- v + c(runif(1, -1), runif(1, -1))
v_mag <- sqrt(v[1]^2 + v[2]^2)
x2 <- x1 + v[1] / v_mag * (r1 + r2)
y2 <- y1 + v[2] / v_mag * (r1 + r2)
alpha <- acos((x1 * x2 + y1 * y2) / (sqrt((x1+0.00001)^2 + y1^2) * sqrt(x2^2 + y2^2))) * 180 / pi
temp3 <- df %>% mutate(d = sqrt((x2 - x)^2 + (y2 - y)^2),
rad = r + r2,
check = ifelse(d < rad, 1, 0))
if (sum(temp3$check) <= 0) {
valid <- 1
df <- df %>% rbind(c(x2, y2, r2, 1, 0, i+1))
df$marked[df$frame == frame] <- df$marked[df$frame == frame] + 1
edges <- edges %>% rbind(c(x1, x2, y1, y2))
}
}
}
print(i)
}
ggplot() +
geom_segment(aes(x = x, xend = xend, y = y, yend = yend), edges %>% filter (x != xend),
size = 0.35) +
#geom_point(aes(x, y), edges %>% filter (x != xend), size = 0.5, colour = "#253494") +
#geom_circle(aes(x0 = x, y0 = y, r = r), df) +
coord_equal() +
theme_blankcanvas
# load packages ----
library(dplyr)
library(ggforce)
library(ggplot2) # requires development version
# plotting theme ----
theme_blankcanvas <- theme(
axis.title = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
axis.line = element_blank(),
legend.position = "none",
panel.background = element_rect(fill = "transparent"),
panel.border = element_blank(),
panel.grid = element_blank(),
plot.background = element_rect(fill = "transparent", colour = "transparent"),
plot.margin = unit(c(0, 0, -1, -1), "mm"), # top, right, bottom, left
strip.background = element_blank(),
strip.text = element_blank()
)
# preliminaries ----
set.seed(110) # make reproducible
# set up data frames
df <- data.frame(x = c(0, 500, 500, 0), y = c(0, 0, 500, 500), r = 1, c = 1, marked = 0, frame = 1)
edges <- data.frame(x = 0, xend = 0, y = 0, yend = 0)
# parameters
n <- 1000
p <- 0.5
m <- 1
v <- c(runif(1, -1), runif(1, -1))
# main algorithm ----
for (i in seq(1, n)) {
if (runif(1) <= p) {
m <- m + 1
df <- df %>% rbind(c(runif(1), runif(1), runif(1), m, 0, i+1))
} else {
valid <- 0
while (valid < 1) {
temp <- sample_n(df %>% filter(marked < 3), 1)
frame <- temp$frame[1]
x1 <- temp$x[1]
y1 <- temp$y[1]
r1 <- temp$r[1]
r2 <- ifelse(runif(1) <= p, runif(1, 0, 10), runif(1, 0.5, 1))
#r2 <- 1
v <- v + c(runif(1, -1), runif(1, -1))
v_mag <- sqrt(v[1]^2 + v[2]^2)
x2 <- x1 + v[1] / v_mag * (r1 + r2)
y2 <- y1 + v[2] / v_mag * (r1 + r2)
alpha <- acos((x1 * x2 + y1 * y2) / (sqrt((x1+0.00001)^2 + y1^2) * sqrt(x2^2 + y2^2))) * 180 / pi
temp3 <- df %>% mutate(d = sqrt((x2 - x)^2 + (y2 - y)^2),
rad = r + r2,
check = ifelse(d < rad, 1, 0))
if (sum(temp3$check) <= 0) {
valid <- 1
df <- df %>% rbind(c(x2, y2, r2, 1, 0, i+1))
df$marked[df$frame == frame] <- df$marked[df$frame == frame] + 1
edges <- edges %>% rbind(c(x1, x2, y1, y2))
}
}
}
print(i)
}
# create plot ----
ggplot() +
geom_segment(aes(x = x, xend = xend, y = y, yend = yend), edges %>% filter (x != xend),
size = 0.35) +
#geom_point(aes(x, y), edges %>% filter (x != xend), size = 0.5, colour = "#253494") +
#geom_circle(aes(x0 = x, y0 = y, r = r), df) +
coord_equal() +
theme_blankcanvas
# save plot ----
ggsave("genbrain-multi-3.png", width = 24, height = 14, units = "cm", dpi = 300)
# load packages ----
library(dplyr)
library(ggforce)
library(ggplot2) # requires development version
# plotting theme ----
theme_blankcanvas <- theme(
axis.title = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
axis.line = element_blank(),
legend.position = "none",
panel.background = element_rect(fill = "transparent"),
panel.border = element_blank(),
panel.grid = element_blank(),
plot.background = element_rect(fill = "transparent", colour = "transparent"),
plot.margin = unit(c(0, 0, -1, -1), "mm"), # top, right, bottom, left
strip.background = element_blank(),
strip.text = element_blank()
)
# preliminaries ----
set.seed(110) # make reproducible
# set up data frames
df <- data.frame(x = c(0, 500, 500, 0), y = c(0, 0, 500, 500), r = 1, c = 1, marked = 0, frame = 1)
edges <- data.frame(x = 0, xend = 0, y = 0, yend = 0)
# parameters
n <- 100000
p <- 0.5
m <- 1
v <- c(runif(1, -1), runif(1, -1))
# main algorithm ----
for (i in seq(1, n)) {
if (runif(1) <= p) {
m <- m + 1
df <- df %>% rbind(c(runif(1), runif(1), runif(1), m, 0, i+1))
} else {
valid <- 0
while (valid < 1) {
temp <- sample_n(df %>% filter(marked < 3), 1)
frame <- temp$frame[1]
x1 <- temp$x[1]
y1 <- temp$y[1]
r1 <- temp$r[1]
r2 <- ifelse(runif(1) <= p, runif(1, 0, 10), runif(1, 0.5, 1))
#r2 <- 1
v <- v + c(runif(1, -1), runif(1, -1))
v_mag <- sqrt(v[1]^2 + v[2]^2)
x2 <- x1 + v[1] / v_mag * (r1 + r2)
y2 <- y1 + v[2] / v_mag * (r1 + r2)
alpha <- acos((x1 * x2 + y1 * y2) / (sqrt((x1+0.00001)^2 + y1^2) * sqrt(x2^2 + y2^2))) * 180 / pi
temp3 <- df %>% mutate(d = sqrt((x2 - x)^2 + (y2 - y)^2),
rad = r + r2,
check = ifelse(d < rad, 1, 0))
if (sum(temp3$check) <= 0) {
valid <- 1
df <- df %>% rbind(c(x2, y2, r2, 1, 0, i+1))
df$marked[df$frame == frame] <- df$marked[df$frame == frame] + 1
edges <- edges %>% rbind(c(x1, x2, y1, y2))
}
}
}
print(i)
}
ggplot() +
geom_segment(aes(x = x, xend = xend, y = y, yend = yend), edges %>% filter (x != xend),
size = 0.35) +
#geom_point(aes(x, y), edges %>% filter (x != xend), size = 0.5, colour = "#253494") +
#geom_circle(aes(x0 = x, y0 = y, r = r), df) +
coord_equal() +
theme_blankcanvas
# save plot ----
ggsave("genbrain-multi-4.png", width = 24, height = 14, units = "cm", dpi = 300)
ggsave("genbrain-multi-4.png", width = 24, height = 24, units = "cm", dpi = 300)
ggplot() +
geom_segment(aes(x = x, xend = xend, y = y, yend = yend), edges %>% filter (x != xend),
size = 0.35) +
#geom_point(aes(x, y), edges %>% filter (x != xend), size = 0.5, colour = "#253494") +
#geom_circle(aes(x0 = x, y0 = y, r = r), df) +
coord_equal()
ggplot() +
geom_segment(aes(x = x, xend = xend, y = y, yend = yend), edges %>% filter (x != xend),
size = 0.35) +
#geom_point(aes(x, y), edges %>% filter (x != xend), size = 0.5, colour = "#253494") +
#geom_circle(aes(x0 = x, y0 = y, r = r), df) +
coord_equal() + xlim(-100, 250) + ylim(-250, 325)
ggplot() +
geom_segment(aes(x = x, xend = xend, y = y, yend = yend), edges %>% filter (x != xend),
size = 0.35) +
#geom_point(aes(x, y), edges %>% filter (x != xend), size = 0.5, colour = "#253494") +
#geom_circle(aes(x0 = x, y0 = y, r = r), df) +
coord_equal() + xlim(-100, 250) + ylim(-200, 325)
theme_blankcanvas
ggplot() +
geom_segment(aes(x = x, xend = xend, y = y, yend = yend), edges %>% filter (x != xend),
size = 0.35) +
#geom_point(aes(x, y), edges %>% filter (x != xend), size = 0.5, colour = "#253494") +
#geom_circle(aes(x0 = x, y0 = y, r = r), df) +
coord_equal() + xlim(-100, 250) + ylim(-175, 325)
ggplot() +
geom_segment(aes(x = x, xend = xend, y = y, yend = yend), edges %>% filter (x != xend),
size = 0.35) +
#geom_point(aes(x, y), edges %>% filter (x != xend), size = 0.5, colour = "#253494") +
#geom_circle(aes(x0 = x, y0 = y, r = r), df) +
coord_equal() + xlim(-100, 250) + ylim(-175, 325)
theme_blankcanvas
ggplot() +
geom_segment(aes(x = x, xend = xend, y = y, yend = yend), edges %>% filter (x != xend),
size = 0.35) +
#geom_point(aes(x, y), edges %>% filter (x != xend), size = 0.5, colour = "#253494") +
#geom_circle(aes(x0 = x, y0 = y, r = r), df) +
coord_equal() + xlim(-100, 250) + ylim(-175, 325) +
theme_blankcanvas
ggplot() +
geom_segment(aes(x = x, xend = xend, y = y, yend = yend), edges %>% filter (x != xend),
size = 0.35, colour = "white") +
#geom_point(aes(x, y), edges %>% filter (x != xend), size = 0.5, colour = "#253494") +
#geom_circle(aes(x0 = x, y0 = y, r = r), df) +
coord_equal() + xlim(-100, 250) + ylim(-175, 325) +
theme_blankcanvas + theme(plot.background = element_rect(fill = "black"))
ggplot() +
geom_segment(aes(x = x, xend = xend, y = y, yend = yend), edges %>% filter (x != xend),
size = 0.35, colour = "white") +
#geom_point(aes(x, y), edges %>% filter (x != xend), size = 0.5, colour = "#253494") +
#geom_circle(aes(x0 = x, y0 = y, r = r), df) +
coord_equal() + xlim(-100, 250) + ylim(-175, 325) +
theme_blankcanvas + theme(plot.background = element_rect(fill = "black")) + coord_polar()
ggplot() +
geom_segment(aes(x = x, xend = xend, y = y, yend = yend), edges %>% filter (x != xend),
size = 0.35, colour = "black") +
#geom_point(aes(x, y), edges %>% filter (x != xend), size = 0.5, colour = "#253494") +
#geom_circle(aes(x0 = x, y0 = y, r = r), df) +
coord_equal() + xlim(-100, 250) + ylim(-175, 325) +
theme_blankcanvas + theme(plot.background = element_rect(fill = "lightgray")) + coord_polar()
ggplot() +
geom_segment(aes(x = x, xend = xend, y = y, yend = yend), edges %>% filter (x != xend),
size = 0.35, colour = "white") +
#geom_point(aes(x, y), edges %>% filter (x != xend), size = 0.5, colour = "#253494") +
#geom_circle(aes(x0 = x, y0 = y, r = r), df) +
coord_equal() + xlim(-100, 250) + ylim(-175, 325) +
theme_blankcanvas + theme(plot.background = element_rect(fill = "black")) + coord_polar()
# save plot ----
ggsave("genbrain-multi-5.png", width = 24, height = 24, units = "cm", dpi = 300)
tmp <- installed.packages()
installedpkgs <- as.vector(tmp[is.na(tmp[,"Priority"]), 1])
save(installedpkgs, file="installed_old.rda")
load("installed_old.rda")
tmp <- installed.packages()
installedpkgs.new <- as.vector(tmp[is.na(tmp[,"Priority"]), 1])
missing <- setdiff(installedpkgs, installedpkgs.new)
install.packages(missing)
chooseBioCmirror()
install.packages(c("digest", "Matrix", "mgcv", "nlme", "survival"))
setwd("~/Dropbox/mathart/bezier")
library(tidyverse)
library(ggart)
library(ggforce)
library(tweenr)
set.seed(101)
n <- 3 * 100
v <- rep(seq(1, n / 3), 3)
v2 <- v + n + 1
eps <- 0.25
df1 <- data.frame(
index = 1:n,
x = (cos(1:n))^2 + runif(n, -eps, eps),
y = (sin(1:n))^3 + runif(n, -eps, eps),
type = factor(v[order(v)]),
point = rep(c('end', 'control', 'end'), n / 3)
)
df2 <- data.frame(
index = 1:n,
x = (cos(1:n)) + runif(n, -eps, eps),
y = (sin(1:n)) + runif(n, -eps, eps),
type = factor(v[order(v2)]),
point = rep(c('end', 'control', 'end'), n / 3)
)
df <- list(df1, df2)
tf <- tween_states(df, tweenlength = 1, statelength = 0,
ease = "bounce-out",
nframes = 100) %>%
mutate(type = paste(type, "_", .frame, sep = ""))
p <- ggplot() +
geom_bezier(aes(x = x, y = y, group = type, frame = .frame), tf, alpha = 0.4, size = 0.05) +
coord_equal() +
theme_blankcanvas()
ggsave("plots/plot002.png", p, width = 25, height = 25, units = "cm")
library(tidyverse)
library(ggart)
library(ggforce)
library(tweenr)
set.seed(101)
n <- 3 * 100
v <- rep(seq(1, n / 3), 3)
v2 <- v + n + 1
eps <- 0.25
df1 <- data.frame(
index = 1:n,
x = (cos(1:n))^2 + runif(n, -eps, eps),
y = (sin(1:n))^3 + runif(n, -eps, eps),
type = factor(v[order(v)]),
point = rep(c('end', 'control', 'end'), n / 3)
)
df2 <- data.frame(
index = 1:n,
x = (cos(1:n)) + runif(n, -eps, eps),
y = (sin(1:n)) + runif(n, -eps, eps),
type = factor(v[order(v2)]),
point = rep(c('end', 'control', 'end'), n / 3)
)
df <- list(df1, df2)
tf <- tween_states(df, tweenlength = 1, statelength = 0,
ease = "bounce-out",
nframes = 200) %>%
mutate(type = paste(type, "_", .frame, sep = ""))
p <- ggplot() +
geom_bezier(aes(x = x, y = y, group = type, frame = .frame), tf, alpha = 0.4, size = 0.05) +
coord_equal() +
theme_blankcanvas()
ggsave("plots/plot002.png", p, width = 25, height = 25, units = "cm")
library(tidyverse)
library(ggart)
library(ggforce)
library(tweenr)
set.seed(101)
n <- 3 * 100
v <- rep(seq(1, n / 3), 3)
v2 <- v + n + 1
eps <- 0.25
df1 <- data.frame(
index = 1:n,
x = (cos(1:n))^2 + runif(n, -eps, eps),
y = (sin(1:n))^(1/2) + runif(n, -eps, eps),
type = factor(v[order(v)]),
point = rep(c('end', 'control', 'end'), n / 3)
)
df2 <- data.frame(
index = 1:n,
x = (cos(1:n)) + runif(n, -eps, eps),
y = (sin(1:n)) + runif(n, -eps, eps),
type = factor(v[order(v2)]),
point = rep(c('end', 'control', 'end'), n / 3)
)
df <- list(df1, df2)
tf <- tween_states(df, tweenlength = 1, statelength = 0,
ease = "bounce-out",
nframes = 200) %>%
mutate(type = paste(type, "_", .frame, sep = ""))
p <- ggplot() +
geom_bezier(aes(x = x, y = y, group = type, frame = .frame), tf, alpha = 0.4, size = 0.05) +
coord_equal() +
theme_blankcanvas()
ggsave("plots/plot003.png", p, width = 25, height = 25, units = "cm")
library(tidyverse)
library(ggart)
library(ggforce)
library(tweenr)
set.seed(101)
n <- 3 * 100
v <- rep(seq(1, n / 3), 3)
v2 <- v + n + 1
eps <- 0.25
df1 <- data.frame(
index = 1:n,
x = (cos(1:n))^2 + runif(n, -eps, eps),
y = (sin(1:n))^3 + runif(n, -eps, eps),
type = factor(v[order(v)]),
point = rep(c('end', 'control', 'end'), n / 3)
)
df2 <- data.frame(
index = 1:n,
x = (cos(1:n)) + runif(n, -eps, eps),
y = (sin(1:n)) + runif(n, -eps, eps),
type = factor(v[order(v2)]),
point = rep(c('end', 'control', 'end'), n / 3)
)
df <- list(df1, df2)
tf <- tween_states(df, tweenlength = 1, statelength = 0,
ease = "exponential-out",
nframes = 200) %>%
mutate(type = paste(type, "_", .frame, sep = ""))
p <- ggplot() +
geom_bezier(aes(x = x, y = y, group = type, frame = .frame), tf, alpha = 0.4, size = 0.05) +
coord_equal() +
theme_blankcanvas()
ggsave("plots/plot003.png", p, width = 25, height = 25, units = "cm")
library(tidyverse)
library(ggart)
library(ggforce)
library(tweenr)
set.seed(101)
n <- 3 * 100
v <- rep(seq(1, n / 3), 3)
v2 <- v + n + 1
eps <- 0.25
df1 <- data.frame(
index = 1:n,
x = (cos(1:n))^2 + runif(n, -eps, eps),
y = (sin(1:n))^3 + runif(n, -eps, eps),
type = factor(v[order(v)]),
point = rep(c('end', 'control', 'end'), n / 3)
)
df2 <- data.frame(
index = 1:n,
x = (cos(1:n)) + runif(n, -eps, eps),
y = (sin(1:n)) + runif(n, -eps, eps),
type = factor(v[order(v2)]),
point = rep(c('end', 'control', 'end'), n / 3)
)
df <- list(df1, df2)
tf <- tween_states(df, tweenlength = 1, statelength = 0,
ease = "exponential-in",
nframes = 200) %>%
mutate(type = paste(type, "_", .frame, sep = ""))
p <- ggplot() +
geom_bezier(aes(x = x, y = y, group = type, frame = .frame), tf, alpha = 0.4, size = 0.05) +
coord_equal() +
theme_blankcanvas()
ggsave("plots/plot004.png", p, width = 25, height = 25, units = "cm")
library(viridis)
library(tidyverse)
library(ggart)
library(ggforce)
library(tweenr)
library(viridis)
set.seed(101)
n <- 3 * 100
v <- rep(seq(1, n / 3), 3)
v2 <- v + n + 1
eps <- 0.25
df1 <- data.frame(
index = 1:n,
x = (cos(1:n))^2 + runif(n, -eps, eps),
y = (sin(1:n))^3 + runif(n, -eps, eps),
type = factor(v[order(v)]),
point = rep(c('end', 'control', 'end'), n / 3)
)
df2 <- data.frame(
index = 1:n,
x = (cos(1:n)) + runif(n, -eps, eps),
y = (sin(1:n)) + runif(n, -eps, eps),
type = factor(v[order(v2)]),
point = rep(c('end', 'control', 'end'), n / 3)
)
df <- list(df1, df2)
tf <- tween_states(df, tweenlength = 1, statelength = 0,
ease = "exponential-out",
nframes = 200) %>%
mutate(type = paste(type, "_", .frame, sep = ""))
p <- ggplot() +
geom_bezier(aes(x = x, y = y, group = type, frame = .frame, colour = .frame),
tf, alpha = 0.4, size = 0.05) +
coord_equal() +
scale_color_viridis() +
theme_blankcanvas()
ggsave("plots/plot004.png", p, width = 25, height = 25, units = "cm")
p <- ggplot() +
geom_bezier(aes(x = x, y = y, group = type, frame = .frame),
tf, alpha = 0.4, size = 0.05, colour = "white") +
coord_equal() +
#scale_color_viridis() +
theme_blankcanvas(bg_col = "black")
ggsave("plots/plot004.png", p, width = 25, height = 25, units = "cm")
library(tidyverse)
library(ggart)
library(ggforce)
library(tweenr)
library(viridis)
set.seed(101)
n <- 3 * 100
v <- rep(seq(1, n / 3), 3)
v2 <- v + n + 1
eps <- 0.25
df1 <- data.frame(
index = 1:n,
x = (cos(1:n))^2 + runif(n, -eps, eps),
y = (sin(1:n))^3 + runif(n, -eps, eps),
type = factor(v[order(v)]),
point = rep(c('end', 'control', 'end'), n / 3)
)
df2 <- data.frame(
index = 1:n,
x = (cos(1:n)) + runif(n, -eps, eps),
y = (sin(1:n)) + runif(n, -eps, eps),
type = factor(v[order(v2)]),
point = rep(c('end', 'control', 'end'), n / 3)
)
df <- list(df1, df2)
tf <- tween_states(df, tweenlength = 1, statelength = 0,
ease = "exponential-out",
nframes = 200) %>%
mutate(type = paste(type, "_", .frame, sep = ""))
p <- ggplot() +
geom_bezier(aes(x = x, y = y, group = type, frame = .frame),
tf, alpha = 0.4, size = 0.05) +
coord_equal() +
theme_blankcanvas()
ggsave("plots/plot003.png", p, width = 25, height = 25, units = "cm")
